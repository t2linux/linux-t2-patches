From e6481aba75da91098c182b59d79ad4a7e13bb772 Mon Sep 17 00:00:00 2001
From: Orlando Chamberlain <orlandoch.dev@gmail.com>
Date: Mon, 14 Nov 2022 17:29:52 +0300
Subject: [PATCH 13/13] HID: apple-magic-backlight: init

Add support for the keyboard backlight on Intel T2 Macs
with internal Magic Keyboards (MacBookPro16,x and MacBookAir9,1)

Signed-off-by: Orlando Chamberlain <orlandoch.dev@gmail.com>
Co-developed-by: Kerem Karabay <kekrby@gmail.com>

---
 MAINTAINERS                         |   6 ++
 drivers/hid/Kconfig                 |  12 +++
 drivers/hid/Makefile                |   1 +
 drivers/hid/apple-magic-backlight.c | 146 ++++++++++++++++++++++++++++
 drivers/hid/apple-touchbar.c        |   4 +
 drivers/hid/apple-touchbar.h        |  53 ++++++++++
 6 files changed, 222 insertions(+)
 create mode 100644 drivers/hid/apple-magic-backlight.c
 create mode 100644 drivers/hid/apple-touchbar.h

diff --git a/MAINTAINERS b/MAINTAINERS
index 90448cdab492..38b0b46bc338 100644
--- a/MAINTAINERS
+++ b/MAINTAINERS
@@ -9090,6 +9090,12 @@ F:	include/linux/pm.h
 F:	include/linux/suspend.h
 F:	kernel/power/
 
+HID APPLE MAGIC BACKLIGHT DRIVER
+M:	Orlando Chamberlain <orlandoch.dev@gmail.com>
+L:	linux-input@vger.kernel.org
+S:	Maintained
+F:	drivers/hid/apple-magic-backlight.c
+
 HID CORE LAYER
 M:	Jiri Kosina <jikos@kernel.org>
 M:	Benjamin Tissoires <benjamin.tissoires@redhat.com>
diff --git a/drivers/hid/Kconfig b/drivers/hid/Kconfig
index 749ff4be399a..65abb3de5074 100644
--- a/drivers/hid/Kconfig
+++ b/drivers/hid/Kconfig
@@ -148,6 +148,7 @@ config HID_APPLE_IBRIDGE
 
 config HID_APPLE_TOUCHBAR
 	tristate "Apple Touch Bar"
+	depends on USB_HID
 	help
 	Say Y here if you want support for the Touch Bar on recent
 	MacBook Pros.
@@ -155,6 +156,17 @@ config HID_APPLE_TOUCHBAR
 	To compile this driver as a module, choose M here: the
 	module will be called apple-touchbar.
 
+config HID_APPLE_MAGIC_BACKLIGHT
+	tristate "Apple Magic Keyboard Backlight"
+	depends on USB_HID
+	help
+	Say Y here if you want support for the keyboard backlight on Macs with
+	the magic keyboard (MacBookPro16,x and MacBookAir9,1). Note that this
+	driver is not for external magic keyboards.
+
+	To compile this driver as a module, choose M here: the
+	module will be called apple-magic-backlight.
+
 config HID_APPLEIR
 	tristate "Apple infrared receiver"
 	depends on (USB_HID)
diff --git a/drivers/hid/Makefile b/drivers/hid/Makefile
index c792e42fe43f..a961914ec399 100644
--- a/drivers/hid/Makefile
+++ b/drivers/hid/Makefile
@@ -28,6 +28,7 @@ obj-$(CONFIG_HID_ACRUX)		+= hid-axff.o
 obj-$(CONFIG_HID_APPLE)		+= hid-apple.o
 obj-$(CONFIG_HID_APPLE_IBRIDGE)	+= apple-ibridge.o
 obj-$(CONFIG_HID_APPLE_TOUCHBAR)	+= apple-touchbar.o
+obj-$(CONFIG_HID_APPLE_MAGIC_BACKLIGHT)	+= apple-magic-backlight.o
 obj-$(CONFIG_HID_APPLEIR)	+= hid-appleir.o
 obj-$(CONFIG_HID_CREATIVE_SB0540)	+= hid-creative-sb0540.o
 obj-$(CONFIG_HID_ASUS)		+= hid-asus.o
diff --git a/drivers/hid/apple-magic-backlight.c b/drivers/hid/apple-magic-backlight.c
new file mode 100644
index 000000000000..a365a2a47c46
--- /dev/null
+++ b/drivers/hid/apple-magic-backlight.c
@@ -0,0 +1,146 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Apple Magic Keyboard Backlight Driver
+ *
+ * For Intel Macs with internal Magic Keyboard (MacBookPro16,1-4 and MacBookAir9,1)
+ *
+ * Copyright (c) 2022 Kerem Karabay <kekrby@gmail.com>
+ * Copyright (c) 2023 Orlando Chamberlain <orlandoch.dev@gmail.com>
+ */
+
+#include <linux/hid.h>
+#include <linux/usb.h>
+
+#include "apple-touchbar.h"
+#include "hid-ids.h"
+
+#define APPLE_MAGIC_REPORT_ID_POWER 3
+#define APPLE_MAGIC_REPORT_ID_BRIGHTNESS 1
+
+struct apple_magic_backlight {
+	struct led_classdev cdev;
+	struct hid_device *hdev;
+	struct hid_report *brightness;
+	struct hid_report *power;
+};
+
+static void apple_magic_backlight_power_set(struct apple_magic_backlight *backlight,
+					   char power, char rate)
+{
+	struct hid_report *rep = backlight->power;
+
+	rep->field[0]->value[0] = power ? 1 : 0;
+	rep->field[1]->value[0] = 0x5e; /* Mimic Windows */
+	rep->field[1]->value[0] |= rate << 8;
+
+	hid_hw_request(backlight->hdev, backlight->power, HID_REQ_SET_REPORT);
+}
+
+static void apple_magic_backlight_brightness_set(struct apple_magic_backlight *backlight,
+						int brightness, char rate)
+{
+	struct hid_report *rep = backlight->brightness;
+
+	rep->field[0]->value[0] = brightness;
+	rep->field[1]->value[0] = 0x5e; /* Mimic Windows */
+	rep->field[1]->value[0] |= rate << 8;
+
+	hid_hw_request(backlight->hdev, backlight->brightness, HID_REQ_SET_REPORT);
+}
+
+static void apple_magic_backlight_set(struct apple_magic_backlight *backlight,
+				     int brightness, char rate)
+{
+	apple_magic_backlight_power_set(backlight, brightness, rate);
+	if (brightness)
+		apple_magic_backlight_brightness_set(backlight, brightness, rate);
+}
+
+static int apple_magic_backlight_led_set(struct led_classdev *led_cdev,
+					 enum led_brightness brightness)
+{
+	struct apple_magic_backlight *backlight = container_of(led_cdev,
+			struct apple_magic_backlight, cdev);
+
+	apple_magic_backlight_set(backlight, brightness, 1);
+	return 0;
+}
+
+static int apple_magic_backlight_probe(struct hid_device *hdev,
+				       const struct hid_device_id *id)
+{
+	struct apple_magic_backlight *backlight;
+	int rc;
+
+	backlight = devm_kzalloc(&hdev->dev, sizeof(*backlight), GFP_KERNEL);
+
+	if (!backlight)
+		return -ENOMEM;
+
+	hid_set_drvdata(hdev, backlight);
+
+	rc = hid_parse(hdev);
+	if (rc)
+		goto free;
+
+	rc = hid_hw_start(hdev, HID_CONNECT_DEFAULT);
+	if (rc)
+		goto free;
+
+	backlight->brightness = hid_register_report(hdev, HID_FEATURE_REPORT,
+			APPLE_MAGIC_REPORT_ID_BRIGHTNESS, 0);
+	backlight->power = hid_register_report(hdev, HID_FEATURE_REPORT,
+			APPLE_MAGIC_REPORT_ID_POWER, 0);
+
+	if (!backlight->brightness || !backlight->power) {
+		rc = -ENODEV;
+		goto hw_stop;
+	}
+
+	backlight->hdev = hdev;
+	backlight->cdev.name = "apple::kbd_backlight";
+	backlight->cdev.max_brightness = backlight->brightness->field[0]->logical_maximum;
+	backlight->cdev.brightness_set_blocking = apple_magic_backlight_led_set;
+
+	apple_magic_backlight_set(backlight, 0, 0);
+
+	return devm_led_classdev_register(&hdev->dev, &backlight->cdev);
+hw_stop:
+	hid_hw_stop(hdev);
+free:
+	kfree(backlight);
+	return rc;
+}
+
+static void apple_magic_backlight_remove(struct hid_device *hdev)
+{
+	struct apple_magic_backlight *backlight = hid_get_drvdata(hdev);
+
+	hid_hw_stop(hdev);
+	kfree(backlight);
+}
+
+static bool apple_magic_backlight_match(struct hid_device *hdev, bool ignore_special_driver)
+{
+	return appletb_is_hdev_for_magic_backlight(hdev);
+}
+
+static const struct hid_device_id apple_magic_backlight_hid_ids[] = {
+	{ HID_USB_DEVICE(USB_VENDOR_ID_APPLE, USB_DEVICE_ID_APPLE_TOUCHBAR_BACKLIGHT) },
+	{ }
+};
+
+static struct hid_driver apple_magic_backlight_hid_driver = {
+	.name = "apple-magic-backlight",
+	.id_table = apple_magic_backlight_hid_ids,
+	.match = apple_magic_backlight_match,
+	.probe = apple_magic_backlight_probe,
+	.remove = apple_magic_backlight_remove,
+};
+
+module_hid_driver(apple_magic_backlight_hid_driver);
+
+MODULE_DESCRIPTION("MacBook Magic Keyboard Backlight");
+MODULE_AUTHOR("Orlando Chamberlain <orlandoch.dev@gmail.com>");
+MODULE_LICENSE("GPL");
+MODULE_DEVICE_TABLE(hid, apple_magic_backlight_hid_ids);
diff --git a/drivers/hid/apple-touchbar.c b/drivers/hid/apple-touchbar.c
index 40c12886e651..89b401944b28 100644
--- a/drivers/hid/apple-touchbar.c
+++ b/drivers/hid/apple-touchbar.c
@@ -42,6 +42,7 @@
 
 #include "hid-ids.h"
 #include "apple-ibridge.h"
+#include "apple-touchbar.h"
 
 #define HID_UP_APPLE		0xff120000
 #define HID_USAGE_MODE		(HID_UP_CUSTOM | 0x0004)
@@ -1222,6 +1223,9 @@ static int appletb_probe(struct hid_device *hdev,
 	unsigned long flags;
 	int rc;
 
+	if (appletb_is_hdev_for_magic_backlight(hdev))
+		return -ENODEV;
+
 	spin_lock_irqsave(&tb_dev->tb_lock, flags);
 
 	if (!tb_dev->log_dev)
diff --git a/drivers/hid/apple-touchbar.h b/drivers/hid/apple-touchbar.h
new file mode 100644
index 000000000000..ea5f75c803fa
--- /dev/null
+++ b/drivers/hid/apple-touchbar.h
@@ -0,0 +1,53 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * Helpers for apple-touchbar and apple-magic-keyboard
+ *
+ * Copyright (c) 2022 Kerem Karabay <kekrby@gmail.com>
+ */
+#ifndef __HID_APPLE_TOUCHBAR_H
+#define __HID_APPLE_TOUCHBAR_H
+
+#include <linux/usb.h>
+#include <linux/hid.h>
+
+#include "hid-ids.h"
+
+static int __appletb_match_display(struct device *dev, const void *data)
+{
+	struct usb_device_descriptor *desc;
+
+	if (strcmp(dev->type->name, "usb_interface") != 0)
+		return 0;
+
+	desc = &interface_to_usbdev(to_usb_interface(dev))->descriptor;
+
+	return desc->idVendor == USB_VENDOR_ID_APPLE &&
+	    desc->idProduct == USB_DEVICE_ID_APPLE_TOUCHBAR_DISPLAY;
+}
+
+static inline bool appletb_is_hdev_for_magic_backlight(struct hid_device *hdev)
+{
+	__u8 bInterfaceNumber;
+	struct device *tb_disp;
+	struct device *parent = hdev->dev.parent;
+	struct usb_interface *iface = to_usb_interface(parent);
+	struct usb_device_descriptor *desc = &interface_to_usbdev(iface)->descriptor;
+
+	if (!(desc->idVendor == USB_VENDOR_ID_APPLE &&
+		    desc->idProduct == USB_DEVICE_ID_APPLE_TOUCHBAR_BACKLIGHT))
+		return false;
+
+	tb_disp = bus_find_device(parent->bus, NULL, NULL, __appletb_match_display);
+	bInterfaceNumber = iface->cur_altsetting->desc.bInterfaceNumber;
+
+	put_device(tb_disp);
+
+	/*
+	 * The backlight of a magic keyboard is managed using the 1st interface
+	 * of the "Touch Bar Backlight" device if a touchbar is present. If
+	 * not, the 0th interface should be used.
+	 */
+	return (tb_disp && bInterfaceNumber == 1) || (!tb_disp && bInterfaceNumber == 0);
+}
+
+#endif // __HID_APPLE_TOUCHBAR_H
-- 
2.39.1
